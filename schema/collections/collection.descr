=short

=schema

==xml
<element name="collection" type="ms:_collection" substitutionGroup="ms:native">
  <complexType>
    <complexContent>
      <extension base="ms:_native" />
    </complexContent>
  </complexType>
</element>
==end

=description

<p>The <i>collection</i> is a <SCHEMA>ms:unit</SCHEMA> which groups
sets of bytes into a (virtual) entity.  It MAY also be a wrapping
sub-collections, sub-sets of data.</p>

<p>Finally, only the <SCHEMA>ms:part</SCHEMA> elements describe the
location of the bytes in the collection, but fetching them usually is
a multi-stage task peeling off layers of collections, like union rings
at run-time.</p>

=element resource

<p>The <code>address</code> of the <SCHEMA>ms:resource</SCHEMA>
element refers to the <SCHEMA>ms:store</SCHEMA>
where this collection is located, or its parent <code>collection</code>.

=element collection

<p>The current <code>collection</code> may have sub-sets, which are
also collections.</p>

<p>Your sub-set may also be a sub-set of other collections or stores.</p>

=example collection

==xml
<ms:unit ms:id="cc:crawl-data">
  <ms:type>msc:Role.Collection</ms:type>
  <ms:resource ms:ref="cc:s3">
     <ms:address>crawl-data</ms:address>
  </ms:in>
  <ms:resource ms:ref="cc:http" />
  <ms:has ms:ref="cc:2020dec-crawl" />
  <ms:has ms:ref="cc:2021jan-crawl" />
  <ms:has ms:ref="cc:2021feb-crawl" />   <!-- and a hundred more -->
</ms:collection>
==json
"ms:collection": {
   "ms:id": "cc:crawl-data",
   "ms:resource": [
     { "ms:href": "cc:s3",   "ms:address": "crawl_data" },
     { "ms:href": "cc:http", "ms:address": "crawl_data" } ],
   "ms:has": [
     { "ms:ref": "cc:2020dec-crawl" },
     { "ms:ref": "cc:2021jan-crawl" },
     { "ms:ref": "cc:2021feb-crawl" } ]
}
==end

